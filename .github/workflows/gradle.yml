  # .github/workflows/ci-cd.yml
name: CI/CD Pipeline for Dad Marketplace

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch: # 수동 실행 허용

env:
  # Java 및 Gradle 버전 설정
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  GRADLE_VERSION: '8.5' # Gradle 4.0.0은 너무 오래된 버전이므로 8.5 권장
  
  # 프로젝트 설정
  PROJECT_NAME: 'dad-marketplace'
  
  # 테스트 환경 변수
  SPRING_PROFILES_ACTIVE: 'test'

jobs:
  # 1단계: TDD 테스트 실행
  test:
    name: "TDD 테스트 실행"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Java 환경 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}

    - name: Gradle 캐시 설정
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Gradle 실행 권한 부여
      run: chmod +x ./gradlew


    - name: 환경 변수 설정 및 .env 파일 생성
      run: |
        # .env 파일 생성
        cat > .env << EOF
        # MySQL 데이터베이스 설정
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD || 'testpassword' }}
        MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE || 'testdb' }}
        MYSQL_USER=${{ secrets.MYSQL_USER || 'testuser' }}
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD || 'testpassword' }}
        
        # Discord OAuth 설정
        DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID || 'test_client_id' }}
        DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET || 'test_client_secret' }}
        
        # 애플리케이션 설정
        BASE_URL=${{ secrets.BASE_URL || 'http://localhost:8080' }}
        REGISTRATION_ID=discord
        
        # 테스트 환경 설정
        SPRING_PROFILES_ACTIVE=test
        EOF
        
        # .env 파일이 생성되었는지 확인 (민감한 정보는 로그에 출력하지 않음)
        echo "✅ .env 파일이 생성되었습니다."
        echo "파일 크기: $(wc -c < .env) bytes"
        
        # GitHub Environment Variables로도 설정
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE || 'testdb' }}" >> $GITHUB_ENV
        echo "MYSQL_USER=${{ secrets.MYSQL_USER || 'testuser' }}" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD || 'testpassword' }}" >> $GITHUB_ENV
        echo "BASE_URL=${{ secrets.BASE_URL || 'http://localhost:8080' }}" >> $GITHUB_ENV
        echo "DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID || 'test_client_id' }}" >> $GITHUB_ENV
        echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET || 'test_client_secret' }}" >> $GITHUB_ENV


    - name: 단위 테스트 실행
      if: matrix.test-type == 'unit'
      run: |
        ./gradlew test --tests "*Test" \
          --continue
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          build/reports/tests/
          build/test-results/
        retention-days: 7

    - name: 테스트 커버리지 리포트 생성
      if: matrix.test-type == 'unit'
      run: ./gradlew jacocoTestReport

    - name: 커버리지 결과 업로드
      if: matrix.test-type == 'unit'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/reports/jacoco/
        retention-days: 7

    # Codecov 커버리지 업로드 (선택사항)
    # - name: Codecov 커버리지 업로드
    #   if: matrix.test-type == 'unit'
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: build/reports/jacoco/test/jacocoTestReport.xml
    #     token: ${{ secrets.CODECOV_TOKEN }}

  # 3단계: 빌드 및 아티팩트 생성
  build:
    name: "애플리케이션 빌드"
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Java 환경 설정
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}

    - name: Gradle 캐시 설정
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Gradle 실행 권한 부여
      run: chmod +x ./gradlew

    - name: 애플리케이션 빌드
      run: ./gradlew build -x test

    - name: JAR 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/*.jar
        retention-days: 7

    - name: 빌드 정보 생성
      run: |
        echo "BUILD_NUMBER=${{ github.run_number }}" >> build-info.txt
        echo "COMMIT_SHA=${{ github.sha }}" >> build-info.txt
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> build-info.txt
        echo "BRANCH=${{ github.ref_name }}" >> build-info.txt

    - name: 빌드 정보 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build-info.txt
        retention-days: 7

  # 4단계: Docker 이미지 빌드 및 GHCR 푸시
  docker-build:
    name: "Docker 이미지 빌드 및 GHCR 푸시"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: GHCR 로그인
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: build/libs/

    - name: 환경 변수 설정 및 .env 파일 생성 (Docker용)
      run: |
        # Docker 이미지에 포함될 .env 파일 생성
        cat > .env << EOF
        # MySQL 데이터베이스 설정
        MYSQL_ROOT_PASSWORD=\${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE=\${MYSQL_DATABASE}
        MYSQL_USER=\${MYSQL_USER}
        MYSQL_PASSWORD=\${MYSQL_PASSWORD}
        
        # Discord OAuth 설정
        DISCORD_CLIENT_ID=\${DISCORD_CLIENT_ID}
        DISCORD_CLIENT_SECRET=\${DISCORD_CLIENT_SECRET}
        
        # 애플리케이션 설정
        BASE_URL=\${BASE_URL}
        REGISTRATION_ID=discord
        
        # 운영 환경 설정
        SPRING_PROFILES_ACTIVE=docker
        EOF
        
        echo "✅ Docker용 .env 템플릿이 생성되었습니다."

    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}

    - name: Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 이미지 정보 출력
      run: |
        echo "🐳 Docker 이미지가 성공적으로 빌드되고 GHCR에 푸시되었습니다!"
        echo "이미지 태그들:"
        echo "${{ steps.meta.outputs.tags }}"

  # 5단계: 배포 (main 브랜치만)
  deploy:
    name: "배포"
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: dad-marketplace-back-secret
    
    steps:
    - name: 배포 시작 알림
      run: |
        echo "🚀 프로덕션 배포를 시작합니다..."
        echo "커밋: ${{ github.sha }}"
        echo "브랜치: ${{ github.ref_name }}"
        echo "이미지: ghcr.io/${{ github.repository }}:main-$(echo ${{ github.sha }} | cut -c1-7)"

    - name: 배포 서버 웹훅 호출
      run: |
        # 배포 서버의 웹훅 엔드포인트 호출
        curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DEPLOY_WEBHOOK_SECRET }}" \
          -d '{
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "image": "ghcr.io/${{ github.repository }}:main-$(echo ${{ github.sha }} | cut -c1-7)",
            "build_number": "${{ github.run_number }}",
            "timestamp": "'$(date -u +'%Y-%m-%dT%H:%M:%SZ')'"
          }'
      env:
        DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}
        DEPLOY_WEBHOOK_SECRET: ${{ secrets.DEPLOY_WEBHOOK_SECRET }}

    - name: 배포 완료 대기
      run: |
        echo "⏳ 배포 서버에서 이미지를 pull하고 컨테이너를 시작하는 중..."
        sleep 30  # 배포 서버가 처리할 시간 제공

    - name: 배포 상태 확인
      run: |
        # 배포된 애플리케이션의 health check
        if [ -n "${{ secrets.DEPLOY_HEALTH_CHECK_URL }}" ]; then
          echo "🔍 배포 상태를 확인합니다..."
          for i in {1..10}; do
            if curl -f -s "${{ secrets.DEPLOY_HEALTH_CHECK_URL }}/actuator/health" > /dev/null; then
              echo "✅ 애플리케이션이 정상적으로 배포되었습니다!"
              exit 0
            fi
            echo "대기 중... (${i}/10)"
            sleep 30
          done
          echo "❌ 배포 상태 확인에 실패했습니다."
          exit 1
        else
          echo "⚠️ DEPLOY_HEALTH_CHECK_URL이 설정되지 않아 상태 확인을 건너뜁니다."
        fi

    # 실제 배포 로직은 사용하는 플랫폼에 따라 달라집니다
    # 예: AWS, Azure, GCP, Heroku 등
    
    - name: 배포 완료 알림
      run: echo "✅ 배포가 완료되었습니다!"

  # 6단계: 알림 (선택사항)
  notify:
    name: "빌드 결과 알림"
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: 성공 알림
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ 모든 테스트가 통과하고 빌드가 성공했습니다!"
        echo "커밋: ${{ github.sha }}"
        echo "브랜치: ${{ github.ref_name }}"

    - name: 실패 알림
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ 테스트 또는 빌드가 실패했습니다!"
        echo "커밋: ${{ github.sha }}"
        echo "브랜치: ${{ github.ref_name }}"

    # Slack 알림 (선택사항)
    # - name: Slack 알림
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#dev-notifications'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #   if: always()
